plot_cruisetrack(sfl, "ocean_tmp", bin=5)
bin = 5
sfl <- sfl %>%#
        group_by(date= cut(date, breaks=paste(bin, "hour"))) %>%#
        summarise_all(mean)
sfl %>%#
        group_by(date= cut(date, breaks=paste(bin, "hour")))
paste(bin, "hour")
sfl %>%#
        group_by(date= cut(date, breaks="5 hour"))
tibble(sfl)
sfl <- get.sfl.table(db)
tibble(sfl)
head(sfl)
?tibble
sfl$date <- as.POSXIct(sfl$date, format="%FT%T", tz='GMT')
sfl$date <- as.POSIXct(sfl$date, format="%FT%T", tz='GMT')
sfl$date
plot_cruisetrack <- function(sfl, param, bin=NULL){#
#
  sfl$date <- as.POSIXct(sfl$date, format="%FT%T", tz='GMT')#
  geo <- list(#
    showland = TRUE,#
    showlakes = TRUE,#
    showcountries = TRUE,#
    showocean = TRUE,#
    countrywidth = 0.5,#
    landcolor = plotly::toRGB("grey90"),#
    lakecolor = plotly::toRGB("white"),#
    oceancolor = plotly::toRGB("white"),#
    projection = list(#
      type = 'orthographic',#
      rotation = list(#
        lon = -100,#
        lat = 40,#
        roll = 0#
      )#
    ),#
    lonaxis = list(#
      showgrid = TRUE,#
      gridcolor = plotly::toRGB("gray40"),#
      gridwidth = 0.5#
    ),#
    lataxis = list(#
      showgrid = TRUE,#
      gridcolor = plotly::toRGB("gray40"),#
      gridwidth = 0.5#
    )#
  )#
#
  if(!is.null(bin)) {#
    sfl <- sfl %>%#
        group_by(date= cut(date, breaks=paste(bin, "hour"))) %>%#
        summarise_all(mean)#
#
  }#
#
  p <- plotly::plot_geo(sfl, lat = ~lat, lon = ~lon, color = sfl[,param], colors = viridis::viridis_pal(option = "D")(100), alpha=0.5) %>%#
        plotly::colorbar(title = paste(param)) %>%#
        plotly::layout(showlegend=T, geo = geo)#
#
    return(p)#
#
}
plot_cruisetrack(sfl, "ocean_tmp", bin=5)
plot_cruisetrack(sfl, "ocean_tmp", bin=NULL)
sfl <- sfl %>%#
        group_by(date= cut(date, breaks=paste(bin, "hour"))) %>%#
        summarise_all(mean)
sfl
sfl <- data.frame(sfl)
head(sfl)
plot_cruisetrack <- function(sfl, param, bin=NULL){#
#
  sfl$date <- as.POSIXct(sfl$date, format="%FT%T", tz='GMT')#
  geo <- list(#
    showland = TRUE,#
    showlakes = TRUE,#
    showcountries = TRUE,#
    showocean = TRUE,#
    countrywidth = 0.5,#
    landcolor = plotly::toRGB("grey90"),#
    lakecolor = plotly::toRGB("white"),#
    oceancolor = plotly::toRGB("white"),#
    projection = list(#
      type = 'orthographic',#
      rotation = list(#
        lon = -100,#
        lat = 40,#
        roll = 0#
      )#
    ),#
    lonaxis = list(#
      showgrid = TRUE,#
      gridcolor = plotly::toRGB("gray40"),#
      gridwidth = 0.5#
    ),#
    lataxis = list(#
      showgrid = TRUE,#
      gridcolor = plotly::toRGB("gray40"),#
      gridwidth = 0.5#
    )#
  )#
#
  if(!is.null(bin)) {#
    sfl <- sfl %>%#
        group_by(date= cut(date, breaks=paste(bin, "hour"))) %>%#
        summarise_all(mean)#
    sfl <- data.frame(sfl)#
  }#
#
  p <- plotly::plot_geo(sfl, lat = ~lat, lon = ~lon, color = sfl[,param], colors = viridis::viridis_pal(option = "D")(100), alpha=0.5) %>%#
        plotly::colorbar(title = paste(param)) %>%#
        plotly::layout(showlegend=T, geo = geo)#
#
    return(p)#
#
}
plot_cruisetrack(sfl, "ocean_tmp", bin=NULL)
plot_cruisetrack(sfl, "ocean_tmp", bin=5)
sfl <- get.sfl.table(db)
plot_cruisetrack(sfl, "ocean_tmp", bin=NULL)
plot_cruisetrack(sfl, "ocean_tmp", bin=5)
plot_cruisetrack(sfl, "ocean_tmp", bin=1)
plot_cruisetrack(sfl, "ocean_tmp", bin=0.5)
plot_map(stat, param="abundance" , transform=T)
cruise <- "SCOPE_6"#
path <- "/Volumes/SeaFlow-OPP/seaflow-refilter-2018-11-20/"#
opp.dir <- paste0(path, cruise[i], "/", cruise[i], "_opp")#
vct.dir <- paste0(path,cruise[i],"/",cruise[i],"_vct")#
db <- paste0(path, cruise[i], "/", cruise[i], ".db")#
#
outliers.list <- get.outlier.table(db)#
#
head(outliers.list)#note third file, 2015_206/2015-07-25T00-25-45+00-00,  with flag = 3
opp.list <- get.opp.files(db,outliers=TRUE)#
#
head(opp.list)# th
meta <- googlesheets::gs_read(googlesheets::gs_title("SeaFlow\ instrument\ log", verbose = FALSE))#
    official.cruise <- paste(meta[which(meta$cruise == cruise),'Cruise ID'])
paste0(path,cruise, "/",official.cruise,".xlsx")
xls_convert(db, meta, paste0(path,cruise, "/",official.cruise,".xlsx"))
paste0(path,cruise, "/",official.cruise,".xlsx")
xls_convert(db, meta, paste0(path,cruise, "/",official.cruise,".xlsx"))
cruise <- "KM1712"#
    path <- "/Volumes/OPPdata/SeaFlow-OPP/seaflow-refilter-2018-11-20/" # NEW#
    #path <- "/Volumes/OPPdata/SeaFlow-OPP/seaflow-refilter-2018-10-01/" # OLD#
    db <- paste0(path,cruise, "/",cruise,".db")
meta <- googlesheets::gs_read(googlesheets::gs_title("SeaFlow\ instrument\ log", verbose = FALSE))#
    official.cruise <- paste(meta[which(meta$cruise == cruise),'Cruise ID'])
official.cruise
xls_convert(db, meta, paste0(path,cruise, "/",official.cruise,".xlsx"))
paste0(path,cruise, "/",official.cruise,".xlsx")
library(tidyverse)
ctd <- read_csv("~/Documents/DATA/SeaFlow/SF_GRADIENTS/all_uCTD.csv")
ctd
ggplot(ctd, aes(lat, salinity)) + geom_line(group=cruise)
ggplot(ctd, aes(lat, salinity)) + geom_line(x=lat, y=salinity, group=cruise)
ggplot(ctd, aes(lat, salinity)) + geom_line(aes(lat, salinity), group=cruise)
?geom_line
ggplot(ctd, aes(lat, salinity)) + geom_line(group=cruise)
ggplot(ctd, aes(lat, salinity)) + geom_line(group=ctd$cruise)
ggplot(ctd, aes(lat, salinity)) + geom_line(group=ctd$cruise, color=ctd$cruise)
ggplot(ctd, aes(lat, salinity)) + geom_line(group=ctd$cruise, color=c(1,2))
ggplot(ctd, aes(lat, salinity)) + geom_line(aes(group=cruise))
ggplot(ctd, aes(lat, salinity)) + geom_line(aes(group=factor(cruise)))
ggplot(ctd, aes(lat, salinity)) + geom_points(aes(group=factor(cruise)))
ggplot(ctd, aes(lat, salinity)) + geom_point(aes(group=factor(cruise)))
ggplot(ctd, aes(lat, salinity)) + geom_point(aes(group=factor(cruise), color=factor(cruise)))
unique(ctd$lat)
ctd1 <- subset(ctd, cruise == 'gradients1.0')
unique(ctd1$lat)
ctd2 <- subset(ctd, cruise == 'gradients2.0')
unique(ctd2$lat)
library(flowCore)#
library(splancs)#
library(plotrix)#
library(caroline)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
plot.cytogram <- function (evtopp, para.x = "FSC.small.stuff", para.y = "X692.40.small.stuff", ...)#
{#
    cols <- colorRampPalette(c("blue4", "royalblue4", "deepskyblue3",#
        "seagreen3", "yellow", "orangered2", "darkred"))#
    par(pty = "s")#
    plot(evtopp[, c(para.x, para.y)], pch = 16, cex = 0.3,col = densCols(log10(evtopp[, c(para.x, para.y)]),#
          colramp = cols), xlim = c(1, 10^4), ylim = c(1, 10^4), log='xy',...)#
          }#
#
plot.vct.cytogram <- function (opp, para.x = "fsc_small", para.y = "chl_small", ...)#
          {#
        plot(opp[, c(para.x, para.y)], pch = 16, cex = 0.3, col = as.numeric(as.factor(opp$pop)),#
                    xlim = c(1, 10^4), ylim = c(1, 10^4), log='xy', ...)#
              legend("topleft", legend = (unique(opp$pop)), col = unique(as.numeric(as.factor(opp$pop))),#
                  pch = 16, pt.cex = 0.6, bty = "n")#
                    }
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL
summary.table$abundance_cells.mL[37:60]
summary.table
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))
summary.table
summary.table$abundance_cells.mL[37:60]
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] * 2
WARNING: CYANOBACTERIA cultures were diluted 100X before counting (see 2nd line in notebook Influx-notebook/harvest3.jpg), Micromonas pusilla was dilutd 5 times.#
summary.table$abundance_cells.mL[37:60] <- summary.table$abundance_cells.mL[37:60] * 100#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5#
beads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)#
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste("influx-cultures.csv", sep=""), row.names=FALSE)#
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("calibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
mie <- read.csv("INFLUXcalibrated-mie.csv")
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL#
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] * 2#
#
# WARNING: CYANOBACTERIA cultures were diluted 100X before counting (see 2nd line in notebook Influx-notebook/harvest3.jpg), Micromonas pusilla was dilutd 5 times.#
summary.table$abundance_cells.mL[37:60] <- summary.table$abundance_cells.mL[37:60] * 100#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5#
beads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste("influx-cultures.csv", sep=""), row.names=FALSE)
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
lot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)]
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] * 2
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)]
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)
cultures$Sample.ID
cultures
cultures
cultures
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL
summary.table$abundance_cells.mL
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] * 2
summary.table$abundance_cells.mL
# WARNING: CYANOBACTERIA cultures were diluted 100X before counting (see 2nd line in notebook Influx-notebook/harvest3.jpg), Micromonas pusilla was dilutd 5 times.#
summary.table$abundance_cells.mL[37:60] <- summary.table$abundance_cells.mL[37:60] * 100#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5
eads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)
cultures
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste("influx-cultures.csv", sep=""), row.names=FALSE)
cultures <- read.csv("influx-cultures.csv")
cultures
ath.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)
merge
poc
merge
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")
cultures
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL#
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] * 2#
#
# WARNING: CYANOBACTERIA cultures were diluted 100X before counting (see 2nd line in notebook Influx-notebook/harvest3.jpg), Micromonas pusilla was dilutd 5 times.#
summary.table$abundance_cells.mL[37:60] <- summary.table$abundance_cells.mL[37:60] * 100#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5#
beads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste("influx-cultures.csv", sep=""), row.names=FALSE)
paste("influx-cultures.csv", sep="")
paste(path.to.git.repository,"/influx-cultures.csv", sep="")
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL#
summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] <- summary.table$abundance_cells.mL[c(37:40,45:48,49:56)] / 2#
#
# WARNING: CYANOBACTERIA cultures were diluted 100X before counting (see 2nd line in notebook Influx-notebook/harvest3.jpg), Micromonas pusilla was dilutd 5 times.#
summary.table$abundance_cells.mL[37:60] <- summary.table$abundance_cells.mL[37:60] * 100#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5#
beads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)#
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste(path.to.git.repository,"/influx-cultures.csv", sep=""), row.names=FALSE)#
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)#
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
path.to.data <- "~/Documents/DATA/Codes/fsc-poc-calibration/fsc-poc-calibration-data"#
setwd(path.to.data)#
summary.table <- read.csv(file=paste("influx_raw_summary.csv", sep=""))#
#
volume <- c(rep(500.3,2), rep(500.5,2),rep(496,2),rep(500.12,2),rep(300.3,2),rep(300.22,2),rep(300.45,2), rep(300,2), rep(150.46,2), rep(200.18,2),rep(150.2,2), rep(200.1,2),rep(300.28,2),rep(302,2),rep(200.57,2),rep(199.97,2),rep(300.25,2),#
            rep(300.24,2),rep(99.9,2),rep(100.13,2),rep(99.87,2),rep(99.84,2),rep(100.05,2),rep(99.98,2),rep(100.2,2),rep(100.2,2),rep(99.93,2),rep(99.9,2),rep(100.07,2),rep(100.07,2))#
name <- rep(c("EHux","Licmo","Micro","Navicula","PT-632","PT-632","TAPS-1335","TAPS-3367","TW-3365","Pro 1314", "Syn 7803", "Pro AS9601", "Pro Med4","Pro Nat12A", "Syn WH8102"),each=4)#
#
### CALCULATE CELL ABUNDANCE#
summary.table$volume.uL <- volume#
summary.table$abundance_cells.mL <- 1000 * summary.table$n / summary.table$volume.uL # cells / mL#
#
# WARNING: Small size phytoplankton cultures were dilutd before counting (see Influx-notebook/harvest1.jpg, harvest2.jpg Influx-notebook/harvest3.jpg).#
#
summary.table$abundance_cells.mL[c(37:40,45:56)] <- summary.table$abundance_cells.mL[c(37:40,45:56)] * 50 # Prochlorococcus cultures were diluted 50X#
summary.table$abundance_cells.mL[c(41:44,57:60)] <- summary.table$abundance_cells.mL[c(41:44,57:60)] * 100 # Synechococcus cultures were diluted 100X#
summary.table$abundance_cells.mL[9:12] <- summary.table$abundance_cells.mL[9:12] * 5 #Micromonas pusilla was dilutd 5 times#
beads <- subset(summary.table, i == 'beads')#
cultures <- subset(summary.table, i == 'picoeuk')#
print(paste("Does rows of 'beads' and rows of 'cultures' match?",unique(cultures$file == beads$file)))#
cultures$norm.fsc <- round(cultures$fsc/beads$fsc,2)#
cultures$norm.chl <- round(cultures$fsc/beads$chl,2)#
write.csv(cultures[,c("file","n","volume.uL","abundance_cells.mL","norm.fsc", "norm.chl")],file=paste(path.to.git.repository,"/influx-cultures.csv", sep=""), row.names=FALSE)#
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)#
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
png("Qc-scatter.png",width=12, height=6, unit='in', res=200)#
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}#
#
dev.off()
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}
merge
library(flowCore)#
library(splancs)#
library(plotrix)#
library(caroline)#
library(popcycle)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))
##############################
#### 3. FSC NORMALIZATION ####
##############################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
for(inst in c(740,751)){#
    print(inst)#
    list <- dir(".", pattern = paste0(inst,"_raw_summary.csv"), recursive=T, full.names=T)#
#
    DF <- NULL#
    for(file in list){#
        df <- read.csv(file)#
        beads <- subset(df, i == 'beads')#
        cultures <- subset(df, i == 'picoeuk')#
#
        print(paste("Does rows of beads and cultures match?",unique(cultures$file == beads$file)))#
        cultures$norm.fsc <- round(cultures$fsc/mean(beads$fsc),2)#
        cultures$norm.chl <- round(cultures$fsc/mean(beads$chl),2)#
        DF <- rbind(DF, cultures)#
    }#
    time <- as.POSIXct(DF$file, format = "%FT%H-%M-%S", tz = "GMT")#
    DF[order(time),]#
    write.csv(DF,file=paste0(path.to.git.repository,"/",inst,"-cultures.csv", sep=""), row.names=FALSE)#
#
}#
#
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
merge
poc
cultures.mean
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("MICRO",2),rep("NAV", 2), rep("PT 632",4), rep("TAPS 1135",2), rep("TAPS 3367",2), rep("TW 3365",2), rep("1314",2), rep("7803",2), rep("AS9601",2), rep("MED4",2),rep("NAT12A",2),rep("WH8102",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl
merge(poc.mean, cultures.mean, by='Sample.ID')
poc.mean
cultures.mean
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep(" Micromonas pusilla",2),rep("Navicula transitans", 2), rep("Phaedactylum tricornutum",4), rep("Thalassiosira pseudonana (1135)",2),#
                        rep("Thalassiosira pseudonana (3367)",2), rep("TW 3365",2), rep("Prochlorococcus (1314)",2), rep("Synechococcus (7803)",2), #
                        rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')
merge
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)#
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically PT632 & LICMO since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
# 2. We also excluded data from EHUX since we collected only one filter, giving us little confidence in POc measurement.#
merge2 <- subset(merge, Sample.ID !="PT 632" & Sample.ID !="EHUX" & Sample.ID !="LICMO")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
merge
merge2 <- subset(merge, Sample.ID !="Phaedactylum tricornutum")
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically Phaedactylum tricornutum since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
merge2 <- subset(merge, Sample.ID !="Phaedactylum tricornutum")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}
poc
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
cultures
merge <- merge(poc, cultures.mean, by='Sample.ID')
merge
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))
merge
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}
merge2
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep(" Micromonas pusilla",2),rep("Navicula transitans", 2), rep("Phaeodactylum tricornutum",4), rep("Thalassiosira pseudonana (1135)",2),#
                        rep("Thalassiosira pseudonana (3367)",2), rep("TW 3365",2), rep("Prochlorococcus (1314)",2), rep("Synechococcus (7803)",2),#
                        rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically Phaedactylum tricornutum since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)#
#
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
png("Qc-scatter.png",width=12, height=6, unit='in', res=200)#
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}#
#
dev.off()
merge
cultures
poc
poc <- read.csv("Qc-cultures.csv")
poc
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep(" Micromonas pusilla",2),rep("Navicula transitans", 2), rep("Phaeodactylum tricornutum",4), rep("Thalassiosira pseudonana (1135)",2),#
                        rep("Thalassiosira pseudonana (3367)",2), rep("TW 3365",2), rep("Prochlorococcus (1314)",2), rep("Synechococcus (7803)",2),#
                        rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)
merge
poc.mean
cultures.mean
merge(poc.mean, cultures.mean, by='Sample.ID')
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("poc-data.csv")#
cultures <- read.csv("influx-cultures.csv")#
cultures$Sample.ID <- c(rep("EHUX",2), rep("LICMO",2), rep("Micromonas pusilla",2),rep("Navicula transitans", 2), rep("Phaeodactylum tricornutum",4), rep("Thalassiosira pseudonana (1135)",2),#
                        rep("Thalassiosira pseudonana (3367)",2), rep("TW 3365",2), rep("Prochlorococcus (1314)",2), rep("Synechococcus (7803)",2),#
                        rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2))#
#
poc.sd <- aggregate(poc, by=list(poc$Sample.ID), FUN=sd)#
poc.mean <- aggregate(poc, by=list(poc$Sample.ID), FUN=mean)#
poc.mean$Sample.ID <- poc.mean$Group.1#
poc.mean$C..ug.ml.sd <- poc.sd$C..ug.ml.#
poc.mean$N..ug.ml.sd <- poc.sd$N..ug.ml.#
#
cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
cultures.mean$Sample.ID <- cultures.mean$Group.1#
cultures.mean$abundance_cells.mL.sd <- cultures.sd$abundance_cells.mL#
cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
#
### MERGE POC with Cell Abundance#
merge <- merge(poc.mean, cultures.mean, by='Sample.ID')#
#
### Calculate Quotas#
merge$pgC.cell <- 10^6*(merge$C..ug.ml.)/(merge$abundance_cells.mL) # pgC.cell-1#
merge$pgN.cell <- 10^6*(merge$N..ug.ml.)/(merge$abundance_cells.mL) # pgN.cell-1#
merge$pgC.cell.sd <- merge$pgC.cell * sqrt((merge$C..ug.ml.sd/merge$C..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
merge$pgN.cell.sd <- merge$pgN.cell * sqrt((merge$N..ug.ml.sd/merge$N..ug.ml.)^2 + (merge$abundance_cells.mL.sd/merge$abundance_cells.mL)^2)#
#
### CELL QUOTAS vs NORM FSC for INFLUX#
write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Influx-Qc-cultures.csv", row.names=FALSE)#
#### CELL QUOTAS reference#
write.csv(merge[,c("Sample.ID","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file="Qc-cultures.csv", row.names=FALSE)
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
.rainbow.cols <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow","#FF7F00", "red", "#7F0000"))#
#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
merge <- read.csv("Influx-Qc-cultures.csv")#
mie <- read.csv("INFLUXcalibrated-mie.csv")#
#
### WARNING !!! ####
# 1. For regression purpose, we excluded elongated cell type, specifically Phaedactylum tricornutum since forward scatter is sensitive to the cell width (not cell length), underestimating the true cell size#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum")#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
# linear regression#
reg <- lm(pgC.cell ~ poly(norm.fsc,1,raw=T) , data=log(merge2[,c("pgC.cell","norm.fsc")],10))#
summary(reg)#
#
png("Influx-Qc-scatter.png",width=12, height=12, unit='in', res=100)#
#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,20), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste("#",inst))#
lines(mie$scatter, mie[,paste0('Qc_mid')], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_upr')], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0('Qc_lwr')], col='grey', lwd=2)#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(.rainbow.cols(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based theoritical data", "(index of refraction 1.031 +/- 0.014)"), pch=c(rep(21,nrow(merge2)),NA, NA), lwd=c(rep(NA,nrow(merge2)),2, NA), bty='n',#
          pt.bg=alpha(.rainbow.cols(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
dev.off()
############################################
### 4. MERGE FCM data with POC/PON data ####
############################################
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
poc <- read.csv("Qc-cultures.csv")#
#
for(inst in c(740,751)){#
#
    #inst <- 740#
    cultures <- read.csv(paste0(inst,"-cultures.csv"))#
#
    if(inst == 740){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2), rep("Phaedactylum tricornutum",2),rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (AS9601)",2), rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (MED4)",2),rep("Prochlorococcus (NAT12A)",2),rep("Synechococcus (WH8102)",2),rep("Synechococcus (7803)",2))#
              }#
    if(inst == 751){ cultures$Sample.ID <- c(rep("Thalassiosira weissflogii",2),rep("Navicula transitans",2), rep("Thalassiosira pseudonana (1135)",2), rep("Thalassiosira pseudonana (3367)",2),rep("Phaedactylum tricornutum",2), rep("Micromonas pusilla",2),#
                                              rep("Prochlorococcus (MED4)",2), rep("Prochlorococcus (AS9601)",2),rep("Prochlorococcus (1314)",2),rep("Prochlorococcus (NAT12A)",2), rep("Synechococcus (WH8102)",2), rep("Synechococcus (7803)",2))#
              }#
#
    cultures.sd <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=sd)#
    cultures.mean <- aggregate(cultures, by=list(cultures$Sample.ID), FUN=mean)#
    cultures.mean$Sample.ID <- cultures.mean$Group.1#
    cultures.mean$norm.fsc.sd <- cultures.sd$norm.fsc#
    cultures.mean$norm.chl.sd <- cultures.sd$norm.chl#
    ### MERGE POC with Cell Abundance#
    merge <- merge(poc, cultures.mean, by='Sample.ID')#
#
    write.csv(merge[,c("Sample.ID","norm.fsc","norm.fsc.sd","norm.chl","norm.chl.sd","abundance_cells.mL","abundance_cells.mL.sd","pgC.cell","pgN.cell","pgC.cell.sd","pgN.cell.sd")],file=paste0(inst,"-Qc-cultures.csv"), row.names=FALSE)#
#
}
#############################
### 5. LINEAR REGRESSION ####
#############################
library(scales)#
library(viridis)#
path.to.git.repository <- "~/Documents/DATA/Codes/fsc-poc-calibration"#
setwd(path.to.git.repository)#
#
png("Qc-scatter.png",width=12, height=6, unit='in', res=200)#
par(mfrow=c(1,2), pty='s',cex=1.2)#
#
for(inst in c(740, 751)){#
#
merge <- read.csv(paste0(inst,"-Qc-cultures.csv"))#
merge2 <- subset(merge, Sample.ID !="Phaeodactylum tricornutum") # remove non-spherical cells#
merge2 <- merge2[order(merge2$norm.fsc),]#
#
mie <- read.csv("calibrated-mie.csv")#
plot(merge2$norm.fsc,merge2$pgC.cell, log='xy', yaxt='n', xaxt='n', pch=NA,xlim=c(0.002,10), ylim=c(0.005,100), ylab=expression(paste("Qc (pgC cell"^{-1},")")), xlab="Normalized scatter (dimensionless)", main=paste(inst))#
with(merge2, arrows(norm.fsc, pgC.cell - pgC.cell.sd, norm.fsc, pgC.cell + pgC.cell.sd,  code = 3, length=0, col='grey', lwd=2))#
with(merge2, arrows(norm.fsc-norm.fsc.sd, pgC.cell, norm.fsc+norm.fsc.sd, pgC.cell,  code = 3, length=0,col='grey',lwd=2))#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_mid")], col='red3', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_upr")], col='grey', lwd=2)#
lines(mie$scatter, mie[,paste0("Qc_",inst,"_lwr")], col='grey', lwd=2)#
points(merge2$norm.fsc,merge2$pgC.cell,bg=alpha(viridis(nrow(merge2)),0.5),cex=2, pch=21)#
axis(2, at=c(0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), labels=c(0.005,0.01, 0.02,0.05,0.1,0.2,0.5,1,2,5,10,20,50,100,1000), las=1)#
axis(1, at=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10),labels=c(0.002,0.005,0.01,0.02,0.05,0.1,0.2,0.5,1,2,5,10))#
legend("topleft",legend=c(as.vector(merge2$Sample.ID),"Mie-based model (n = 1.031 +/- 0.014)"), cex=0.5,pch=c(rep(21,nrow(merge2)),NA), lwd=c(rep(NA,nrow(merge2)),2), bty='n',#
          pt.bg=alpha(viridis(nrow(merge2)),0.5), col=c(rep(1,nrow(merge2)),'red3'), text.font=c(rep(3,nrow(merge2)),1))#
#
}#
#
dev.off()
library(popcycle)#
library(dplyr)#
library(lmodel2)#
#
#######################################
## DOWNLOAD THE RAW DATA using DAT ####
#######################################
dat://fa2bb5981465ff583e091071f2f2c5e5f1b118c5219971a2dde107e4dec25e63#
#
#Path to the raw data (DAT)#
path.to.data <- "~/Documents/DATA/Codes/seaflow-virtualcore/seaflow-virtualcore-data/"#
#########################
### SEAFLOW ANALYSIS ####
#########################
#
#Path to the Git repository#
setwd("~/Documents/DATA/Codes/seaflow-virtualcore")
inst <- 740
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)#
  if(inst == 740 | inst == 751) list <- list[-14]
list
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)
list
library(popcycle)
library(popcycle)#
path.to.data <- "~/Documents/DATA/Codes/seaflow-virtualcore/seaflow-virtualcore-data/"#
inst <- 740#
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)
evt0.3 <- readSeaflow(list[2],transform=F)#
evt0.5 <- readSeaflow(list[3],transform=F)#
evt0.7 <- readSeaflow(list[4],transform=F)#
evt1.0 <- readSeaflow(list[5],transform=F)#
evt1.8 <- readSeaflow(list[13],transform=F)#
evt3.1 <- readSeaflow(list[6],transform=F)#
evt5.7 <- readSeaflow(list[7],transform=F)
plot.cytogram(evt0.3)
?plot.cytogram
plot_cytogram(evt0.3)
evt0.3 <- readSeaflow(list[2],transform=T)#
plot_cytogram(evt0.3)
plot_cytogram(evt0.3, para.x='fsc_small', para.y='pe')
plot.cytogram(evt0.3, para.x='fsc_small', para.y='pe')
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- evt.[evt.$fsc_small > 1, ]#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(aligned[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
id[i]
i
id[i]
id <- c(2:7,13)
id
id[i]
list[id[i]]
evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- evt.[evt.$fsc_small > 1, ]#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)
size <- c(0.3,0.5,0.7,1,3.1,5.7,1.8)#
id <- c(2:7,13)#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- evt[evt$fsc_small > 1, ]#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(aligned[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
size <- c(0.3,0.5,0.7,1,3.1,5.7,1.8)#
id <- c(2:7,13)#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- evt[evt$fsc_small > 1, ]#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
plot_cytogram(BEADS, para.x='fsc_small', para.y='pe')
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1')
plot_cytogram(evt., para.x='fsc_small', para.y='D1')
evt. <- subset(evt., D1 < max(evt.D1) | D2 < max(evt.D2))
evt. <- subset(evt., D1 < max(evt.$D1) | D2 < max(evt.$D2))
plot_cytogram(evt., para.x='fsc_small', para.y='D1')
max(evt.$D1)
max(evt.$D2)
evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))
plot_cytogram(evt., para.x='fsc_small', para.y='D1')
evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, D1 > 1 | D2 > 1 | fsc_small 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) | D2 < max(evt.$D2))
evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, D1 > 1 | D2 > 1 | fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) | D2 < max(evt.$D2))
plot_cytogram(evt., para.x='fsc_small', para.y='D1')
evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, D1 > 1 & D2 > 1 & fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))
plot_cytogram(evt., para.x='fsc_small', para.y='D1')
plot_cytogram(evt., para.x='fsc_small', para.y='pe')
list
inst <- 751#
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)
list
#############
## FIGURE ###
############ #
library(popcycle)#
path.to.data <- "~/Documents/DATA/Codes/seaflow-virtualcore/seaflow-virtualcore-data/"#
inst <- 751#
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)#
#
size <- c(0.3,0.5,0.7,1,1.8,3.1,5.7)#
id <- c(7,8,9,11,10,12,13) #oligo#
id <- c(15,1,2,3,16,4,5) #coastal#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, D1 > 1 & D2 > 1 & fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
#############
## FIGURE ###
############ #
library(popcycle)#
path.to.data <- "~/Documents/DATA/Codes/seaflow-virtualcore/seaflow-virtualcore-data/"#
inst <- 751#
list <- list.files(path=paste0(path.to.data,inst,"_caldata"),pattern=".evt$", recursive=T, full.names=T)#
#
size <- c(0.3,0.5,0.7,1,1.8,3.1,5.7)#
id <- c(7,8,9,11,10,12,13) #oligo#
#id <- c(15,1,2,3,16,4,5) #coastal#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, D1 > 1 & D2 > 1 & fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
size <- c(0.3,0.5,0.7,1,1.8,3.1,5.7)#
id <- c(7,8,9,11,10,12,13) #oligo#
id <- c(15,1,2,3,16,4,5) #coastal#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
size <- c(0.3,0.5,0.7,1,1.8,3.1,5.7)#
id <- c(7,8,9,11,10,12,13) #oligo#
#id <- c(15,1,2,3,16,4,5) #coastal#
#
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
plot_cytogram(BEADS, para.x='fsc_small', para.y='pe')
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1')
?plot_cytogram
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=400)
BEADS <- NULL#
for(i in 1:length(id)){#
  evt <- readSeaflow(list[id[i]],transform=T)#
  evt. <- subset(evt, fsc_small > 1)#
  evt. <- subset(evt., D1 < max(evt.$D1) & D2 < max(evt.$D2))#
  plot.cytogram(evt., para.x='fsc_small', para.y='pe')#
  poly.beads <- getpoly(quiet=TRUE)#
  beads <- subset(evt.,inout(evt.[,c("fsc_small", "pe")],poly=poly.beads, bound=TRUE, quiet=TRUE))#
  beads$size <- size[i]#
  BEADS <- rbind(BEADS, beads)#
}
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=400)
plot.cytogram(evt., para.x='fsc_small', para.y='D1')
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=400)
plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=200)
b <- read.csv(paste0("1.bead_calibration/",inst,"-summary.csv"))
b
plot_cytogram
p <- plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=200)
p
p + geom_point(x=c(10,100,500,750,1000,1200), y=c(3,9,50,70,100,300))
library(tidyverse)
p + geom_point(x=c(10,100,500,750,1000,1200), y=c(3,9,50,70,100,300))
p <- plot_cytogram(BEADS, para.x='fsc_small', para.y='D1', bins=200)
p + geom_point(x=c(10,100,500,750,1000,1200), y=c(3,9,50,70,100,300))
p + geom_point(aes(x=c(10,100,500,750,1000,1200), y=c(3,9,50,70,100,300)))
?geom_point
write.csv(BEADS, paste0("1.bead_calibration/",inst,"-EVT.csv"), quote=F, row.names=F)
